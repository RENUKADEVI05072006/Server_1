package internship;
	import java.io.*;
	import java.net.*;
	import java.util.*;

	public class Server {
	    private static final int PORT = 2701;
	    private static Set<ClientHandler> clientHandlers = new HashSet<>();

	    public static void main(String[] args) {
	        System.out.println("Chat server started on port " + PORT);
	        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
	            while (true) {
	                Socket clientSocket = serverSocket.accept();
	                ClientHandler handler = new ClientHandler(clientSocket);
	                clientHandlers.add(handler);
	                new Thread(handler).start();
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    static void broadcast(String message, ClientHandler excludeUser) {
	        for (ClientHandler client : clientHandlers) {
	            if (client != excludeUser) {
	                client.sendMessage(message);
	            }
	        }
	    }

	    static void removeClient(ClientHandler clientHandler) {
	        clientHandlers.remove(clientHandler);
	    }

	    private static class ClientHandler implements Runnable {
	        private Socket socket;
	        private PrintWriter out;
	        private BufferedReader in;
	        private String userName;

	        public ClientHandler(Socket socket) {
	            this.socket = socket;
	        }

	        public void run() {
	            try {
	                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	                out = new PrintWriter(socket.getOutputStream(), true);

	                out.println("Enter your name:");
	                userName = in.readLine();
	                System.out.println(userName + " connected.");
	                broadcast(userName + " joined the chat", this);

	                String message;
	                while ((message = in.readLine()) != null) {
	                    if (message.equalsIgnoreCase("exit")) {
	                        break;
	                    }
	                    System.out.println(userName + ": " + message);
	                    broadcast(userName + ": " + message, this);
	                }
	            } catch (IOException e) {
	                System.out.println("Error handling client " + userName);
	            } finally {
	                try {
	                    socket.close();
	                } catch (IOException e) {
	                    e.printStackTrace();
	                }
	                removeClient(this);
	                broadcast(userName + " left the chat", this);
	                System.out.println(userName + " disconnected.");
	            }
	        }

	        void sendMessage(String message) {
	            out.println(message);
	        }
	    }
	
}
